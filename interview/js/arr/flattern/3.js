function flatten(arr) {
    // 创建一个栈（stack），初始化为输入数组 arr 的所有元素的副本
    // 使用扩展运算符 [...arr] 避免直接修改原数组
    // 栈用于模拟递归过程，后进先出（LIFO）
    const stack = [...arr];
  
    // 创建一个空数组 res，用于存储最终的扁平化结果
    const res = [];
  
    // 当栈中还有元素时，持续循环处理
    while (stack.length) {
      // 从栈顶弹出一个元素（后进先出）
      // 这相当于“当前要处理的元素”
      const item = stack.pop();
  
      // 判断当前元素是否为数组
      if (Array.isArray(item)) {
        // 如果是数组，则将其所有子元素“展开”并依次推入栈中
        // 注意：使用扩展运算符 ...item 将数组拆解为单独元素
        // 由于是 push，这些元素会按顺序被添加到栈顶
        // 例如：如果 item 是 [3, 4]，那么会执行 stack.push(3, 4)
        // 这样，接下来的 pop 就会先处理 4，再处理 3（逆序）
        stack.push(...item);
      } else {
        // 如果当前元素不是数组（即基本类型，如数字、字符串等）
        // 说明它已经是“叶子节点”，可以直接加入结果数组 res
        res.push(item);
      }
    }
  
    // 由于栈是后进先出，元素被处理的顺序是逆序的
    // 例如：原数组 [1, [2, 3]] 会被处理为 [3, 2, 1]，顺序颠倒
    // 因此需要调用 reverse() 将结果反转，恢复原始顺序
    return res.reverse();
  }